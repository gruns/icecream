import executing # type: ignore
import pprint
from typing import Any
from collections.abc import Generator

PYTHON2: bool

def bindStaticVariable(name, value) -> None: ...
def colorize(s) -> None: ...
def supportTerminalColorsInWindows() -> Generator[None, None, None]: ...
def stderrPrint(*args) -> None: ...
def isLiteral(s) -> None: ...
def colorizedStderrPrint(s) -> None: ...

DEFAULT_PREFIX: str
DEFAULT_LINE_WRAP_WIDTH: int
DEFAULT_CONTEXT_DELIMITER: str
DEFAULT_OUTPUT_FUNCTION = colorizedStderrPrint
DEFAULT_ARG_TO_STRING_FUNCTION = pprint.pformat
NO_SOURCE_AVAILABLE_WARNING_MESSAGE: str

def callOrValue(obj) -> None: ...

class Source(executing.Source):
    def get_text_with_indentation(self, node) -> None: ...

def prefixLinesAfterFirst(prefix, s) -> None: ...
def indented_lines(prefix, string) -> None: ...
def format_pair(prefix, arg, value) -> None: ...
def singledispatch(func) -> None: ...
def argumentToString(obj) -> None: ...

class IceCreamDebugger:
    lineWrapWidth: int
    contextDelimiter: str
    enabled: bool
    prefix: str
    includeContext: bool
    outputFunction: Any
    argToStringFunction: Any
    contextAbsPath: str
    def __init__(self, prefix=..., outputFunction=..., argToStringFunction=..., includeContext: bool = ..., contextAbsPath: bool = ...) -> None: ...
    def __call__(self, *args) -> None: ...
    def format(self, *args) -> None: ...
    def enable(self) -> None: ...
    def disable(self) -> None: ...
    def configureOutput(self, prefix=..., outputFunction=..., argToStringFunction=..., includeContext=..., contextAbsPath=...) -> None: ...

ic: IceCreamDebugger
